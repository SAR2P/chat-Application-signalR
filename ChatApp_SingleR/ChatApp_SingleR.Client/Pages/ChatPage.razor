@page "/chat"
@using ChatApp_SingleR.Client.DTOs
@using ChatApp_SingleR.Client.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]

@using ChatApp_SingleR.Client.chatServices
@using ChatModelsLibrary
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject NavigationManager navigationManager
@rendermode InteractiveWebAssembly

<PageTitle>ChatPage</PageTitle>

<div class="row">
    <div class="col-lg-2">
        <div class="card">
            <div class="card-header text-success">Online Users</div>
            <div class="card-body">
                <ul class="list-group">
                    @if (AvailableUsers != null)
                    {
                        foreach (var item in AvailableUsers)
                        {
                            <li class="list-group-item text-success">
                                @item.FullName
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="col-lg-7">
        <div class="card">
            <AuthorizeView>
                <Authorized>
                    <div class="card-header"> Train Chat App [@context.User.Claims.Where(f => f.Type == ClaimTypes.Name).Last().Value]</div>
                </Authorized>
            </AuthorizeView>
            <div class="card-header"> Train Chat App []  </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var message in chats)
                    {
                        <li class="list-group-item mb-2">
                            @message.DateTime.Date.ToString("dd/MMM/yy")
                            <br />
                            <span class="fw-bold">@message.UserName: </span>
                            <br />
                            @message.Message
                        </li>
                    }
                    <div class="mt-3">
                        <EditForm Model="_Chat" OnValidSubmit="SendChat">
                            <DataAnnotationsValidator />
                            <div class="vstack gap-1">
                                <InputText @bind-Value="_Chat.UserName" class="form-control w-2" placeholder="UserName" />
                                <InputTextArea @bind-Value="_Chat.Message" class="form-control" placeholder="Message" />
                            </div>
                            <button class="float-end btn btn-success mt-3" type="submit">Send Message</button>
                        </EditForm>
                    </div>
                </ul>
            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> chat Disconnected </div>
                }
                else
                {
                    <div class="alert alert-success"> chat Connected </div>
                }

            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    public List<AvailableUserDTO> AvailableUsers { get; set; } = [];
    private Chat _Chat = new();
    private HubConnection? _hubConnection;
    public List<Chat> chats { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        _hubConnection.On<Chat>("ReciveMessage", (chat) =>
        {
            chats.Add(chat);
            InvokeAsync(() => StateHasChanged());
        });

        _hubConnection.On<List<AvailableUserDTO>>("NotifyAllClients", (users) =>
        {
            AvailableUsers = users;
            InvokeAsync(() => StateHasChanged());
        });

        await _hubConnection.StartAsync();
        await GetUsersAuthentication();
        var httpClient = new HttpClient();
        chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7196/api/chat");
        AvailableUsers = await httpClient.GetFromJsonAsync<List<AvailableUserDTO>>("https://localhost:7196/api/chat/users");

    }

    public bool IsConnected
    => _hubConnection!.State == HubConnectionState.Connected;

    private async Task GetUsersAuthentication()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity!.IsAuthenticated == true)
        {
            await _hubConnection!.SendAsync("AddAvailableUserAsync", new AvailableUser()
                {
                    UserId = user.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value
                });
        }
    }

    public void SendChat()
    {
        _hubConnection!.SendAsync("SendMessage", _Chat);
        _Chat.Message = null;
    }

}
