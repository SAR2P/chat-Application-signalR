@page "/chat"
@using ChatApp_SingleR.Client.chatServices
@using ChatModelsLibrary
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject NavigationManager navigationManager
@rendermode InteractiveWebAssembly

<PageTitle>ChatPage</PageTitle>

<div class="row">
    <div class="col-lg-7">
        <div class="card">
            <AuthorizeView>
                <Authorized>
                    <div class="card-header"> Train Chat App [@context.User.Claims.Where(f => f.Type == ClaimTypes.Name).Last().Value]</div>
                </Authorized>
            </AuthorizeView>
            <div class="card-header"> Train Chat App []  </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var message in chats)
                    {
                        <li class="list-group-item mb-2">
                            @message.DateTime.Date.ToString("dd/MMM/yy")
                            <br />
                            <span class="fw-bold">@message.UserName: </span>
                            <br />
                            @message.Message
                        </li>
                    }
                    <div class="mt-3">
                        <EditForm Model="_Chat" OnValidSubmit="SendChat">
                            <DataAnnotationsValidator />
                            <div class="vstack gap-1">
                                <InputText @bind-Value="_Chat.UserName" class="form-control w-2" placeholder="UserName" />
                                <InputTextArea @bind-Value="_Chat.Message" class="form-control" placeholder="Message" />
                            </div>
                            <button class="float-end btn btn-success mt-3" type="submit">Send Message</button>
                        </EditForm>
                    </div>
                </ul>
            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> chat Disconnected </div>
                }
                else
                {
                    <div class="alert alert-success"> chat Connected </div>
                }

            </div>
        </div>
    </div>
</div>


@code {
    private Chat _Chat = new();
    private HubConnection? _hubConnection;
    public List<Chat> chats { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        _hubConnection.On<Chat>("ReciveMessage", (chat) =>
        {
            chats.Add(chat);
            InvokeAsync(() => StateHasChanged());
        });
        await _hubConnection.StartAsync();
        var httpClient = new HttpClient();
        chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7196/api/chat");
    }

    public bool IsConnected
    => _hubConnection!.State == HubConnectionState.Connected;


    public void SendChat()
    {
        _hubConnection!.SendAsync("SendMessage", _Chat);
        _Chat.Message = null;
    }

}
